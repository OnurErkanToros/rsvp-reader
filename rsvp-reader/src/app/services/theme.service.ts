import { Injectable } from '@angular/core';nimport { BehaviorSubject, Observable } from 'rxjs';nimport { StorageService } from './storage.service';nimport { Theme, THEMES } from '../utils/constants';nnexport interface ThemeSettings {n  theme: Theme;n  autoDetect: boolean;n}nn@Injectable({n  providedIn: 'root'n})nexport class ThemeService {n  private themeSubject = new BehaviorSubject<Theme>(THEMES.LIGHT);n  private settingsSubject = new BehaviorSubject<ThemeSettings>({n    theme: THEMES.LIGHT,n    autoDetect: truen  });nn  public theme$ = this.themeSubject.asObservable();n  public settings$ = this.settingsSubject.asObservable();nn  constructor(private storageService: StorageService) {n    this.initializeTheme();n  }nn  private initializeTheme(): void {n    // Load saved settingsn    const savedSettings = this.storageService.get<ThemeSettings>('theme_settings');n    n    if (savedSettings) {n      this.settingsSubject.next(savedSettings);n      this.applyTheme(savedSettings.theme);n    } else {n      // Default to system preferencen      this.detectSystemTheme();n    }n  }nn  setTheme(theme: Theme): void {n    this.applyTheme(theme);n    n    const currentSettings = this.settingsSubject.value;n    const newSettings = { ...currentSettings, theme };n    n    this.settingsSubject.next(newSettings);n    this.storageService.set('theme_settings', newSettings);n  }nn  toggleTheme(): void {n    const currentTheme = this.themeSubject.value;n    const newTheme = currentTheme === THEMES.LIGHT ? THEMES.DARK : THEMES.LIGHT;n    this.setTheme(newTheme);n  }nn  private applyTheme(theme: Theme): void {n    this.themeSubject.next(theme);n    n    // Apply theme to documentn    const documentElement = document.documentElement;n    n    if (theme === THEMES.DARK) {n      documentElement.classList.add('dark-theme');n      documentElement.classList.remove('light-theme');n    } else {n      documentElement.classList.add('light-theme');n      documentElement.classList.remove('dark-theme');n    }n  }nn  private detectSystemTheme(): void {n    if (typeof window !== 'undefined') {n      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');n      const systemTheme = mediaQuery.matches ? THEMES.DARK : THEMES.LIGHT;n      n      this.applyTheme(systemTheme);n      n      // Listen for system theme changesn      mediaQuery.addEventListener('change', (e) => {n        if (this.settingsSubject.value.autoDetect) {n          const newSystemTheme = e.matches ? THEMES.DARK : THEMES.LIGHT;n          this.applyTheme(newSystemTheme);n        }n      });n    }n  }nn  getCurrentTheme(): Theme {n    return this.themeSubject.value;n  }nn  setAutoDetect(enabled: boolean): void {n    const currentSettings = this.settingsSubject.value;n    const newSettings = { ...currentSettings, autoDetect: enabled };n    n    this.settingsSubject.next(newSettings);n    this.storageService.set('theme_settings', newSettings);n  }n}