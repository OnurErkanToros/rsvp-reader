import { Injectable, Inject, PLATFORM_ID } from '@angular/core';nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';nimport { BehaviorSubject } from 'rxjs';nimport { StorageService } from './storage.service';nimport { THEMES, Theme } from '../utils/constants';nn@Injectable({n  providedIn: 'root'n})nexport class ThemeService {n  private themeSubject = new BehaviorSubject<Theme>(THEMES.LIGHT);n  public theme$ = this.themeSubject.asObservable();nn  constructor(n    @Inject(DOCUMENT) private document: Document,n    @Inject(PLATFORM_ID) private platformId: Object,n    private storageService: StorageServicen  ) {n    this.loadSavedTheme();n  }nn  getCurrentTheme(): Theme {n    return this.themeSubject.value;n  }nn  toggleTheme(): void {n    const currentTheme = this.themeSubject.value;n    const newTheme = currentTheme === THEMES.LIGHT ? THEMES.DARK : THEMES.LIGHT;n    this.setTheme(newTheme);n  }nn  setTheme(theme: Theme): void {n    this.themeSubject.next(theme);n    this.updateDocumentTheme(theme);n    this.storageService.saveUserSetting('theme', theme);n  }nn  private loadSavedTheme(): void {n    const savedTheme = this.storageService.getUserSetting<Theme>('theme');n    if (savedTheme && this.isValidTheme(savedTheme)) {n      this.setTheme(savedTheme);n    } else {n      // Detect system preference only in browsern      let prefersDark = false;n      if (isPlatformBrowser(this.platformId)) {n        prefersDark = window.matchMedia?.('(prefers-color-scheme: dark)')?.matches || false;n      }n      this.setTheme(prefersDark ? THEMES.DARK : THEMES.LIGHT);n    }n  }nn  private updateDocumentTheme(theme: Theme): void {n    const body = this.document.body;n    body.classList.remove('light-theme', 'dark-theme');n    body.classList.add(`${theme}-theme`);n    n    // Update Material themen    body.setAttribute('data-theme', theme);n  }nn  private isValidTheme(theme: string): theme is Theme {n    return Object.values(THEMES).includes(theme as Theme);n  }nn  isDarkTheme(): boolean {n    return this.getCurrentTheme() === THEMES.DARK;n  }nn  isLightTheme(): boolean {n    return this.getCurrentTheme() === THEMES.LIGHT;n  }n}