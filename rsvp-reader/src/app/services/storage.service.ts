import { Injectable } from '@angular/core';nnexport interface StorageData {n  [key: string]: any;n}nn@Injectable({n  providedIn: 'root'n})nexport class StorageService {n  private readonly PREFIX = 'rsvp_';nn  set<T>(key: string, value: T): void {n    try {n      const fullKey = this.PREFIX + key;n      const serializedValue = JSON.stringify(value);n      localStorage.setItem(fullKey, serializedValue);n    } catch (error) {n      console.error('Storage save error:', error);n      throw new Error('Veri kaydedilemedi');n    }n  }nn  get<T>(key: string): T | null {n    try {n      const fullKey = this.PREFIX + key;n      const item = localStorage.getItem(fullKey);n      n      if (item === null) {n        return null;n      }nn      return JSON.parse(item) as T;n    } catch (error) {n      console.error('Storage read error:', error);n      return null;n    }n  }nn  remove(key: string): void {n    try {n      const fullKey = this.PREFIX + key;n      localStorage.removeItem(fullKey);n    } catch (error) {n      console.error('Storage remove error:', error);n    }n  }nn  clear(): void {n    try {n      const keys = Object.keys(localStorage);n      keys.forEach(key => {n        if (key.startsWith(this.PREFIX)) {n          localStorage.removeItem(key);n        }n      });n    } catch (error) {n      console.error('Storage clear error:', error);n    }n  }nn  has(key: string): boolean {n    try {n      const fullKey = this.PREFIX + key;n      return localStorage.getItem(fullKey) !== null;n    } catch (error) {n      console.error('Storage check error:', error);n      return false;n    }n  }nn  getKeys(): string[] {n    try {n      const keys: string[] = [];n      for (let i = 0; i < localStorage.length; i++) {n        const key = localStorage.key(i);n        if (key && key.startsWith(this.PREFIX)) {n          keys.push(key.replace(this.PREFIX, ''));n        }n      }n      return keys;n    } catch (error) {n      console.error('Storage keys error:', error);n      return [];n    }n  }nn  getSize(): number {n    try {n      let size = 0;n      const keys = this.getKeys();n      n      keys.forEach(key => {n        const value = this.get(key);n        if (value) {n          size += JSON.stringify(value).length;n        }n      });n      n      return size;n    } catch (error) {n      console.error('Storage size error:', error);n      return 0;n    }n  }n}