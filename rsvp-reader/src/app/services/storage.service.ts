import { Injectable, Inject, PLATFORM_ID } from '@angular/core';nimport { isPlatformBrowser } from '@angular/common';nimport { UserSettings } from '../models/user-settings.interface';nimport { CONSTANTS } from '../utils/constants';nn@Injectable({n  providedIn: 'root'n})nexport class StorageService {n  private readonly STORAGE_PREFIX = CONSTANTS.STORAGE_PREFIX;nn  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}nn  saveUserSetting(key: string, value: any): void {n    if (!isPlatformBrowser(this.platformId)) {n      return;n    }n    n    try {n      localStorage.setItem(n        `${this.STORAGE_PREFIX}${key}`, n        JSON.stringify(value)n      );n    } catch (error) {n      console.error('LocalStorage save error:', error);n    }n  }nn  getUserSetting<T>(key: string): T | null {n    if (!isPlatformBrowser(this.platformId)) {n      return null;n    }n    n    try {n      const item = localStorage.getItem(`${this.STORAGE_PREFIX}${key}`);n      return item ? JSON.parse(item) : null : null;n    } catch (error) {n      console.error('LocalStorage read error:', error);n      return null;n    }n  }nn  saveUserSettings(settings: UserSettings): void {n    this.saveUserSetting('userSettings', settings);n  }nn  getUserSettings(): UserSettings | null {n    return this.getUserSetting<UserSettings>('userSettings');n  }nn  clearAllSettings(): void {n    if (!isPlatformBrowser(this.platformId)) {n      return;n    }n    n    const keys = Object.keys(localStorage).filter(key => n      key.startsWith(this.STORAGE_PREFIX)n    );n    keys.forEach(key => localStorage.removeItem(key));n  }nn  isStorageAvailable(): boolean {n    if (!isPlatformBrowser(this.platformId)) {n      return false;n    }n    n    try {n      const test = '__storage_test__';n      localStorage.setItem(test, test);n      localStorage.removeItem(test);n      return true;n    } catch {n      return false;n    }n  }n}